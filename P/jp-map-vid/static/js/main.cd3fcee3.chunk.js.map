{"version":3,"sources":["sqMath.js","App.js","sqMapProjections.js","serviceWorker.js","index.js"],"names":["τ","Math","PI","π","π_2","degrees","radians","abs","sin","cos","tan","sign","sqrt","log","pow","min","max","zero","v","epsilon","pjt","sqMapProjections","_this","this","Object","classCallCheck","projection","pt","equirectangular","get_culling","cull","set_culling","get_num_projections","pjt_list","length","normalize_pt","lg","ctr","lgM","is_orthographic","orthographic","get_orthographic_radius","get_range","get_border","get_projection_object","id","arguments","undefined","fn","find","el","set_tween","projection_last","prj","mercator","tween_pjt","end_tween","set_projection","obj","get_projection_name","name","set_location","lt","pjt1","pjt2","p1","p2","lerp_p","i","frac","interpolate_frac","r2","_this$normalize_pt","_this$normalize_pt2","slicedToArray","φ","equal_earth","x","_this$normalize_pt3","_this$normalize_pt4","θ","asin","θ_2","θ_6","nicolosi_globular","_this$normalize_pt5","_this$normalize_pt6","λ","π_2λ","sinφ","cosφ","b","c","d","sgnλ","b2","d2","b2_d2a1","d2_b2a1","M","N","n","kavrayskiy_VII","_this$normalize_pt7","_this$normalize_pt8","_this$normalize_pt9","_this$normalize_pt10","Δλ","φ0","cosφ0","sinφ0","cosΔλ","bbox2viewBox","bbox","vF","toFixed","concat","Topo2svg","props","mp","other","objectWithoutProperties","type","console","scale","transform","tranz","translate","color_num","fColor","lns","k","stitch_arcs","l","bClosed","n_pts","d_p","p_last","forEach","ac_id","bRemoveLast","bReverse","pts","arc","p","map","pos","slice","decode_arc","arcs","reverse","splice","arc2pts","s","Number","isInteger","parseFloat","dx","dy","svg_line","line_string2path","ls","push","react_default","a","createElement","key","fill","polygon2path","pg","lr","geometry2svg","geometries","gm","hasOwnProperty","objects","SvgMain","width","height","viewBox","world","in","stdDeviation","result","slope","filter","App_Topo2svg","className","bCountries","strokeWidth","GeoTest","_useState","useState","_useState2","wh","setWH","_useState3","_useState4","oM","setOpMap","_useState5","_useState6","oV","setOpVid","_useState7","_useState8","al","setAlign","useEffect","document","title","react","onClick","style","textAlign","fillOpacity","App_SvgMain","class","opacity","src","frameBorder","allow","allowFullScreen","App","App_GeoTest","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd3fcee3.chunk.js","sourcesContent":["// Math definitions: Just for readability\n// https://github.com/d3/d3-geo/blob/master/src/math.js\n\n// consider degeneracy and robustness\n\nexport const τ    = Math.PI*2;\nexport const π    = Math.PI;\nexport const π_2  = Math.PI/2;\nexport const π_4  = Math.PI/4;\nexport const ε    = 1e-6;      // a small threshold value for the floating point computation\nexport const ε2   = 1e-12;\n\nexport const degrees = 180 / π;\nexport const radians = π / 180;\nexport const π_2xdegrees = 90;  // π/2 x degrees\nexport const abs   = Math.abs;\nexport const sin   = Math.sin;\nexport const cos   = Math.cos;\nexport const tan   = Math.tan;\nexport const sign  = Math.sign;\nexport const sqrt  = Math.sqrt;\nexport const pow   = Math.pow;\nexport const log   = Math.log;\n\nexport const min   = Math.min;\nexport const max   = Math.max;\n\nexport const zero    = v => abs(v) < ε;        // is virtually zero?\nexport const epsilon = v => zero(v) ? 0 : v;   // reduce an infinitesimal number to zero\n\n// to avoid NaN for the invalid domain ranges\nexport const asin = x => x > 1 ? π/2 : x < -1  ? -π/2 : Math.asin(x);\nexport const acos = x => x > 1 ? 0   : x < -1  ? π    : Math.acos(x);\n\nexport const haversin = x => (x = sin(x/2))*x;\nexport const range = (x, r1, r2) => min(max(x, r1), r2);  // let r1 ≦ x ≦ r2\n","// TopoJSON to SVG\n//\nimport React, { useState, useEffect, Fragment } from 'react';\nimport './App.scss';\nimport sqMapProjections from './sqMapProjections';\nimport { zero }         from './sqMath';\nimport world            from './map/japan-2017-topo.json';\n\n//const pt2λφ = (pt) => [radians * pt[0], radians * pt[1]];\n\n/*\nconst rotate_π = (p) => {\n  let p2 = p - 160;\n  if (p2 < -180)\n    p2 += 360;\n  return p2;\n}\n*/\n\nconst pjt = new sqMapProjections();\n\nconst map_size = bbox => bbox ? Math.min(bbox[2] - bbox[0], bbox[3] - bbox[1]) : 360;\n//const get_bbox = bbox => bbox ? bbox : [-180, -90, 180, 90];\n\nconst bbox2viewBox = bbox => {\n  if (!bbox)\n    return '-180 -90 180 360';\n  const vF = v => v.toFixed(2);\n  return `${vF(bbox[0])} ${vF(-90 + 2*bbox[1])} ${vF(bbox[2] - bbox[0])} ${vF(bbox[3] - bbox[1])}`;\n  // 122.93 20.42 31.05 25.13\n}\n\n// Compact svg generator that checks if horizontal or vertical lines and uses relative coordinates\n// returns '' when no change in positions\nconst svg_line = (p1, p2) => {\n  const s = v => Number.isInteger(v) ? v : Number.parseFloat(v.toFixed(5));  // short number\n  if (p1 === null)\n    return 'M' + s(p2[0]) + ',' + s(p2[1]);  // starting point\n  const dx = p2[0] - p1[0];\n  const dy = p2[1] - p1[1];\n  if (zero(dx))  return (zero(dy)) ? '' : 'v' + s(dy);\n  if (zero(dy))  return (zero(dx)) ? '' : 'h' + s(dx);\n  return 'l' + s(dx) + ',' + s(dy);  // delta encode\n}\n\nconst Topo2svg = props => {\n  const {mp, ...other} = props;  // extract mp (map) only, and pass the other props for SVG\n\n  if (mp.type !== 'Topology') {\n    console.log('Invalid map: should be a topojson file.');\n    return null;\n  }\n  //const t0 = performance.now();\n\n  // initialize per map\n  const scale = mp.transform ? mp.transform.scale     : [1, 1];\n  const tranz = mp.transform ? mp.transform.translate : [0, 0];\n  let color_num = 0;\n  let fColor = ['Cornsilk', 'BlanchedAlmond', 'Bisque', 'NavajoWhite', 'Wheat', 'Burlywood', 'Tan', 'RosyBrown',\n                'SandyBrown', 'Goldenrod', 'DarkGoldenrod', 'Peru', 'Chocolate',\n                'SaddleBrown', 'Sienna', 'Brown', 'Maroon'];\n  let lns = [];\n  let k = 0;\n  //let countAll=0;  // debug\n  //let countOpt=0;\n  //let maxΔφ = 0;\n\n  // stitch multiple arcs\n  const stitch_arcs = (l, bClosed=true) => {\n    // arc to an array of points\n    const arc2pts = (ac_id, bRemoveLast=true) => {\n      // https://github.com/topojson/topojson-specification\n      const decode_arc = arc => {\n        let p = [0, 0];\n        return arc.map(pos => {\n          pos = pos.slice();\n          pos[0] = (p[0] += pos[0]) * scale[0] + tranz[0];  // rotate_π( \n          pos[1] = (p[1] += pos[1]) * scale[1] + tranz[1];\n          return pos;\n        });\n      }\n      const bReverse = (ac_id < 0);\n      const pts = decode_arc(mp.arcs[bReverse ? ~ac_id : ac_id]);\n      if (bReverse)\n        pts.reverse();\n     // countAll += pts.length;\n      if (bRemoveLast)  // remove redundancy\n        pts.splice(-1, 1);\n      return pts;\n    }\n\n    let n_pts = 0;\n    let d_p = '';\n    let p_last = null;\n    l.forEach(i =>\n      arc2pts(i).forEach(pt => {\n        const p = pjt.projection(pt);\n        if (!p[2]) {\n          d_p += svg_line(p_last, p);\n          p_last = p;\n          n_pts++;\n        }\n      })\n    );\n    if (n_pts < 2) {\n      return null;  // culled or invalid polygons\n    }\n    //countOpt += n_pts;\n    if (bClosed && (n_pts > 2)) {\n      d_p += 'Z';  // close\n    }\n    return d_p;\n  }\n\n  const line_string2path = ls => {\n    const d_p = stitch_arcs(ls, false);  // open path\n    if (d_p)\n      lns.push(<path key={k++} d={d_p} fill=\"none\" />);\n  }\n\n  // use a closed <path> instead of <polygon>\n  // inner polygons (counter-clockwise winding) follow after the first polygon\n  // Outer & Inner loop drawings: http://bl.ocks.org/mapsam/c76ed3ac3a79d9736dd7\n  // Most of data end with a single polygon.\n  const polygon2path = pg => {\n    let d_p = '';  // empty string\n    pg.forEach(lr => {    // for each LinearRing\n      const d = stitch_arcs(lr);\n      if (d)\n        d_p += d;\n    });\n    if (d_p)\n      lns.push(<path key={k++} d={d_p} fill={fColor[color_num % fColor.length]} />);\n  }\n\n  const geometry2svg = obj => {\n    if (!obj)\n      return;\n    switch (obj.type) {\n      case 'Point'             :\n      case 'MultiPoint'        :\n      case 'LineString'        : line_string2path(obj.arcs);                      break;\n      case 'MultiLineString'   : obj.arcs.forEach(ls => line_string2path(ls));    break;\n      case 'Polygon'           : polygon2path(obj.arcs);                          break;\n      case 'MultiPolygon'      : obj.arcs.forEach(pg => polygon2path(pg));        break;\n      case 'GeometryCollection': obj.geometries.forEach(gm => geometry2svg(gm));  break;\n      default:\n    }\n  /*\n    if (geom.hasOwnProperty(\"properties\") &&\n        geom.properties.hasOwnProperty(\"SOV_A3\") &&\n        geom.properties.SOV_A3 === 'JPN')\n      console.log(geom.properties);\n  */\n\n    // ISO 3166 country codes (249 countries)\n    if (obj.hasOwnProperty(\"id\")) {\n      color_num = obj.id % fColor.length;\n    }\n  }\n\n  // topo2svg\n  for (let key in mp.objects) {  // to access the unknown key\n    /*\n    if (mp.objects.hasOwnProperty(key)) {\n      console.log(mp.objects[key]);\n      console.log(mp.objects[key].type);\n    }\n    */\n    geometry2svg(mp.objects[key]);\n  }\n\n  //console.log(\"Total points:\", countAll, \"Optimized:\", countOpt,\n  //  \"Reduced:\", `${((countAll-countOpt)/countAll).toFixed(2)}%`);\n  // console.log(\"maxΔφ=\", maxΔφ);\n  //const t1 = performance.now();\n  //console.log('topo2svg:', (t1-t0).toFixed(2), 'ms');\n\n  return <g {...other}>{lns}</g>;\n}\n\n/*\nconst MapBorder = props => {\n  if (pjt.is_orthographic()) {\n    return <circle className=\"map_border\" cx={0} cy={0} r={pjt.get_orthographic_radius()} />;\n  }\n  const B = pjt.get_border();\n  let pt = [B[0], B[1]];\n  let p_last = null;\n  let d_p = '';\n\n  const move_pt = (i, sgn) => {\n    let p = pjt.projection(pt);\n    d_p += svg_line(p_last, p);\n    p_last = p;  // use .slice() to clone the array\n    pt[i] += sgn * props.step;      // should be a divisor of 90, otherwise out of range trouble can happen\n  }\n\n  while (pt[0] < B[2]) move_pt(0,  1);\n  while (pt[1] < B[3]) move_pt(1,  1);\n  while (pt[0] > B[0]) move_pt(0, -1);\n  while (pt[1] > B[1]) move_pt(1, -1);\n  d_p += 'Z';\n  //console.log(d_p.length);\n\n  return <path className=\"map_border\" d={d_p} />;\n}\n\nconst svg_latitude = (y, step, x1, x2) => {\n  let p_last = null;\n  let d_p = '';\n  for (let x = x1; x <= x2; x += step) {\n    let p = pjt.projection([x, y]);\n    if (!p[2]) {\n      d_p += svg_line(p_last, p);\n      p_last = p;\n    } else {\n      p_last = null;\n    }\n  }\n  return d_p;\n}\n\nconst Graticule = props => {\n  //const t0 = performance.now();\n  const B = pjt.get_range();\n  let d_p = '';\n  // Optimization needed: Build the mesh first and then convert to the svg data\n  // Longitude\n  for (let x = B[0]; x < B[2]; x += props.step) {\n    const y_offset = (x % 45) ? 15 : 0;  // insert offset except for each 45° of the latitude\n    let p_last = null;\n    for (let y = B[1]+y_offset; y <= B[3]-y_offset; y += props.step) {\n      let p = pjt.projection([x, y]);\n      if (!p[2]) {\n        d_p += svg_line(p_last, p);\n        p_last = p;\n      } else {\n        p_last = null;\n      }\n    }\n  }\n  // Latitude\n  for (let y = B[1] + props.step; y < B[3]; y += props.step)\n    d_p += svg_latitude(y, props.step, B[0], B[2]);\n  //const t1 = performance.now();\n  //console.log('Graticule:', (t1-t0).toFixed(2), 'ms');\n\n  return <path className=\"graticule\" d={d_p} />;\n}\n\n// Tropic of Cancer, Tropic of Capricorn: ±23.4368° of the equator\nconst Tropics = props => {\n  const B = pjt.get_range();\n  let d_p = '';\n  for (let y of props.lat)\n    d_p += svg_latitude(y, props.step, B[0], B[2]);\n  return <path className={props.className} d={d_p} />;\n}\n*/\n\nconst SvgMain = props =>\n  <svg width={props.width} height={props.height} viewBox={bbox2viewBox(world.bbox)}>\n    <defs>\n      <filter id='dropshadow' height=\"130%\">\n        <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\".5\" />\n        <feOffset dx=\".5\" dy=\".5\" result=\"offsetblur\" />\n        <feComponentTransfer>\n          <feFuncA type=\"linear\" slope=\"0.5\" />\n        </feComponentTransfer>\n        <feMerge>\n          <feMergeNode />\n          <feMergeNode in=\"SourceGraphic\" />\n        </feMerge>\n      </filter>\n    </defs>\n    <g filter=\"url(#dropshadow)\">\n      <Topo2svg mp={world}\n        className={props.bCountries ? \"countries\" : \"land\"} strokeWidth={(map_size(world.bbox)/1500)}\n      />\n    </g>\n  </svg>;\n\nconst GeoTest = props => {\n  // Declare a new state variable, which we'll call \"count\"\n  const [wh, setWH]      = useState(200);\n  const [oM, setOpMap]   = useState(.9);\n  const [oV, setOpVid]   = useState(.1);\n  const [al, setAlign]   = useState('left');\n  //lg:139.6917+30, lt:35.6895   // Tokyo longitude, latitude of the projection center\n  //lg:-118.4912-40, lt:34.0195  // Santa Monica, CA\n\n  pjt.set_projection(4);\n  pjt.set_culling(false);\n  // Similar to componentDidMount and componentDidUpdate:\n  useEffect(() => {  // run after every render!\n    // Update the document title using the browser API\n    document.title = pjt.get_projection_name();\n  });  // Only re-run the effect if count changes\n\n  return (\n    <Fragment>\n      <div>\n        <button className=\"btnDemo1\" onClick={() => setWH(200)}>                  {'S'}</button>\n        <button className=\"btnDemo1\" onClick={() => setWH(600)}>                  {'M'}</button>\n        <button className=\"btnDemo1\" onClick={() => setWH(1200)}>                 {'L'}</button>\n        <button className=\"btnDemo1\" onClick={() => setWH(wh > 100 ? wh-80 : wh)}>{'-'}</button>\n        <button className=\"btnDemo1\" onClick={() => setWH(wh+80)}>                {'+'}</button>\n        <button className=\"btnDemo1\" onClick={() => setAlign('left')}>            {'<-'}</button>\n        <button className=\"btnDemo1\" onClick={() => setAlign('center')}>          {'-O-'}</button>\n        <button className=\"btnDemo1\" onClick={() => setAlign('right')}>           {'->'}</button>\n        <button className=\"btnDemo1\" onClick={() => setOpMap(oM >= .1 ? oM-.1 : oM)}>{'op:-'}</button>\n        <button className=\"btnDemo1\" onClick={() => setOpMap(oM <= .9 ? oM+.1 : oM)}>{'op:+'}</button>\n        <button className=\"btnDemo2\" onClick={() => setOpVid(oV >= .1 ? oV-.1 : oV)}>{'opVid:-'}</button>\n        <button className=\"btnDemo2\" onClick={() => setOpVid(oV <= .9 ? oV+.1 : oV)}>{'opVid:+'}</button>\n      </div>\n      <div style={{textAlign: al, fillOpacity: oM}}>\n        <SvgMain bCountries={true} width={wh} height={wh} />\n      </div>\n      <div class=\"back-movie\" style={{opacity: oV}}>\n        <iframe title=\"demo\" width=\"1120\" height=\"630\" src=\"https://www.youtube.com/embed/07M8NeGSNr4\"\n          frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n          allowFullScreen></iframe>\n      </div>\n    </Fragment>\n  );\n}\n// https://stackoverflow.com/questions/48248512/svg-transform-rotate180-does-not-work-in-safari-11\n// SVG 1.1 <svg> elements did not support transform attributes. SVG 2 supports it but Safari does not yet do so. \n/*\n  const [bAni,      toggleAni]    = useState(true);\n  const aniFrac = useAnimation('inOutCubic', 3000, 0);  // easing: linear, inQuad, inCubic, elastic, inExpo, ...\n\n  if (bAni) {\n    pjt.interpolate_frac(aniFrac);\n  } else {\n    //pjt.set_location(loc.lg + aniFrac*(139.6917+30), loc.lt + aniFrac*35.6895);\n    pjt.set_location(loc.lg + aniFrac*(360-118.4912), loc.lt + aniFrac*(34.0195-50));\n  }\n\n      <button onClick={() => toggleAni(!bAni)}>{bAni ? 'Stop Animate' : 'Animate'}</button>\n\n  const [bShowTZ,    toggleTZ]        = useState(false);\n      <button onClick={() => toggleTZ(!bShowTZ)}>          {bShowTZ    ? 'Hide Time Zone' : 'Show Time Zone'}</button>\n        {bShowTZ &&\n        <Topo2svg mp={timez}\n          strokeWidth={.3} fill=\"none\" stroke=\"green\" opacity=\".3\"\n        />}\n\n      <MapBorder step={5} />\n      <Graticule step={5} />\n      <Tropics className=\"tropics\" lat={[-23.4368, 23.4368]} step={5} />\n      <Tropics className=\"tropic0\" lat={[0]} step={5} />\n*/\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <GeoTest />\n    </div>\n  );\n}\n\nexport default App;\n\n/*\n          <linearGradient id=\"grad1\" x1=\"20%\" y1=\"30%\" x2=\"40%\" y2=\"80%\">\n            <stop offset=\"0%\"   stopColor=\"#B8D0DE\"></stop>\n            <stop offset=\"100%\" stopColor=\"#73A2BD\"></stop>\n          </linearGradient>\n        <defs>\n          <filter id='glow' x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\" colorInterpolationFilters=\"sRGB\">\n            <feGaussianBlur stdDeviation=\"30\" result=\"coloredBlur\" />\n            <feMerge>\n              <feMergeNode in=\"coloredBlur\" />\n              <feMergeNode in=\"SourceGraphic\" />\n            </feMerge>\n          </filter>\n        </defs>\n */\n","// Map Projections\nimport {\n  π, π_2, τ, π_2xdegrees,\n  degrees, radians,\n  abs, sign, zero, epsilon,\n  sin, cos, tan, asin,\n  log, sqrt,\n  range\n} from './sqMath';\n// https://github.com/d3/d3-geo\n\nexport default class sqMapProjections {\n  constructor() {\n    this.frac = 0;   // fraction 0..1 to interpolate between projections\n    this.pjt_list = [\n      {name: 'Equirectangular',              fn: this.equirectangular},\n      {name: 'Orthographic',                 fn: this.orthographic},\n      {name: 'Nicolosi Globular Projection', fn: this.nicolosi_globular},\n      {name: 'Kavrayskiy VII Projection',    fn: this.kavrayskiy_VII},\n      {name: 'Mercator Projection',          fn: this.mercator},\n      {name: 'Equal Earth Projection',       fn: this.equal_earth},\n    ];\n    this.ctr  = [0, 0];\n    this.cull = true;   // backface culling on by default\n  }\n\n  projection = pt => this.equirectangular(pt);\n\n  get_culling = () => this.cull;\n  set_culling = (cull) => this.cull = cull;\n\n  get_num_projections = () => this.pjt_list.length;\n\n  normalize_pt = pt => {\n    let lg = pt[0] - this.ctr[0];\n    let lt = -pt[1];// + this.ctr[1];\n    const lgM = 180;\n    if      (lg < -lgM) lg += lgM*2;\n    else if (lg >  lgM) lg -= lgM*2;\n    /*\n    if      (lg < -lgM) lg = -lgM;\n    else if (lg >  lgM) lg =  lgM;\n    */\n    return [lg, lt];\n  }\n\n  is_orthographic = () => (this.projection === this.orthographic); \n\n  get_orthographic_radius = () => π_2xdegrees;\n\n  get_range = () => [-180, -90, 180, 90];\n\n  get_border = () => [-180+this.ctr[0], -90, 180+this.ctr[0], 90];\n\n  get_projection_object = (id=null) => {\n    let fn = (id !== null) ? this.pjt_list[id % this.pjt_list.length].fn : this.projection;\n    return this.pjt_list.find(el => el.fn === fn);\n  }\n  \n  set_tween = () => {\n    this.projection_last = this.projection;\n    const prj = (this.projection === this.orthographic) ?  this.mercator : this.projection;\n    this.projection = pt => this.tween_pjt(prj, this.orthographic)(pt);\n    /*\n    this.projection = (this.projection_last === this.orthographic) ?\n       pt => this.tween_pjt(this.orthographic, this.mercator) :\n       pt => this.tween_pjt(this.projection_last, this.orthographic);\n    */\n  }\n\n  end_tween = () => {\n    this.projection = this.projection_last;\n  }\n\n  set_projection = id => {\n    let obj = this.get_projection_object(id);\n    if (obj) {\n      this.projection = obj.fn;         // set a new projection function\n    }\n  }\n\n  get_projection_name = id => {\n    let obj = this.get_projection_object(id);\n    return obj ? obj.name : \"N/A\";\n  }\n\n  set_location = (lg, lt) => { this.ctr = [lg, lt]; }\n  \n  // interpolate between two projections\n  tween_pjt = (pjt1, pjt2) => pt => {\n    const p1 = pjt1(pt);\n    const p2 = pjt2(pt);\n    const lerp_p = i => zero(p1[i]-p2[i]) ? p1[i] : (1 - this.frac) * p1[i] + this.frac * p2[i];\n    const cull = (this.frac >= .99) ? p2[2] : null;\n    return [lerp_p(0), lerp_p(1), cull];\n  }\n\n  interpolate_frac = frac => {\n    this.frac = frac;\n  }\n\n  // ## Equirectangular projection\n  equirectangular = pt => this.normalize_pt(pt);\n\n  // map projection  https://en.wikipedia.org/wiki/List_of_map_projections\n  // ## Mercator cylindrical, conformal projection\n  // x = R(λ - λ0), y = R ln[tan(π/4 + φ/2)]\n  mercator = pt => {\n    const [lg, lt] = this.normalize_pt(pt);\n    const threshold = 85; // 85.051129;\n    const φ = range(lt, -threshold, threshold) * radians;\n    return [ lg, log(tan(π/4 + φ/2)) * degrees ];\n  }\n\n  // ## The Equal Earth pseudocylindrical (equal-area) map projection\n  // ## by Bojan Šavrič, Bernhard Jenny, and Tom Patterson (2018) inspired by Robinson projection.\n  // ## https://www.researchgate.net/publication/326879978_The_Equal_Earth_map_projection\n  equal_earth = pt => {  // longitude(λ), latitude\n    const [lg, lt] = this.normalize_pt(pt); // keep degree unit since the result will be converted back to degree\n    const φ   = lt * radians;\n    const A1  = 1.340264;\n    const A2  = -.081106;\n    const A3  = .000893;\n    const A4  = .003796;\n    const θ   = asin( (sqrt(3) / 2) * sin(φ) );\n    const θ_2 = θ * θ;\n    const θ_6 = θ_2 ** 3;\n\n    return [ 2 * sqrt(3)*lg*cos(θ) / (3*(A1 + 3*A2*θ_2 + θ_6*(7*A3 + 9*A4*θ_2))),\n             θ*( A1 + A2*θ_2 + θ_6*(A3 + A4*θ_2) ) * degrees];\n  }\n\n  // ## Nicolosi globular projection, polyconic\n  nicolosi_globular = pt => {\n    const [lg, lt] = this.normalize_pt(pt);\n    const λ = lg * radians;\n    const φ = lt * radians;\n    const π_2λ  = π/(2*λ);\n    const sinφ = sin(φ);\n    const cosφ = cos(φ);\n\n    // https://beta.observablehq.com/@toja/nicolosi-globular-projection\n    if (λ === 0 || abs(φ) === π_2) return [0, φ * degrees];\n    else if (φ === 0)              return [λ * degrees, 0];\n    else if (abs(λ) === π_2)       return [λ*cosφ * degrees, sinφ * π_2xdegrees];\n\n    const b       = π_2λ - (1/π_2λ);\n    const c       = 2*φ/π;\n    const d       = (1 - c*c) / (sinφ - c);\n    const sgnλ    = sign(λ);\n    const b2      = b*b;\n    const d2      = d*d;\n    const b2_d2   = b2/d2;\n    const d2_b2   = d2/b2;\n    const b2_d2a1 = b2_d2 + 1;\n    const d2_b2a1 = d2_b2 + 1;\n    const M = (b *sinφ/d  - b/2) / b2_d2a1;\n    const N = (d2*sinφ/b2 + d/2) / d2_b2a1;\n    const n = N*N - (d2*sinφ*sinφ/b2 + d*sinφ - 1)/d2_b2a1;\n\n    return [ (M + sqrt( M*M + cosφ*cosφ/b2_d2a1 )  * sgnλ) * π_2xdegrees,\n             (N + sqrt( n < 0 ? 0 : n ) * sign(-φ*b) * sgnλ) * π_2xdegrees ];\n  }\n\n  // Kavrayskiy VII pseudocylindrical, compromise projection\n  kavrayskiy_VII = pt => {\n    const [lg, lt] = this.normalize_pt(pt);\n    const λ = lg * radians;\n    const φ = lt * radians;\n\n    return [ 3*λ/τ * sqrt(π*π/3 - φ*φ) * degrees, lt ];\n  }\n\n  // https://en.wikipedia.org/wiki/Orthographic_projection_in_cartography\n  orthographic = pt => {\n    //const outer = (p >= -180 && p < -90) || (p > 90 && p <= 180);\n    //const outer = (p < -90) || (p > 90);\n    const [lg, lt] = this.normalize_pt(pt);\n    const Δλ = lg * radians;\n    const φ  = lt * radians;\n    const φ0 = -this.ctr[1] * radians;\n    const cosφ  = cos(φ);\n    const cosφ0 = cos(φ0);\n    const sinφ  = sin(φ);\n    const sinφ0 = sin(φ0);\n    const cosΔλ = cos(Δλ);\n    // dot product with the normal (to the screen) =\n    // (cosφ0cosλ0, cosφ0sinλ0, sinφ0)・(cosφcosλ, cosφsinλ, sinφ)\n    // sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ\n    const cull = this.cull ? ( (sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ < 0) ? true : null ) : null;\n    return [ epsilon(  cosφ  * sin(Δλ) * π_2xdegrees ),\n             epsilon( (cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * π_2xdegrees ), cull];\n  }\n}  // class sqMapProjections\n\n/*\n// Stab-Werner Pseudoconical, Equal-area, Equidistant\nexport const pjt_stab-werner = (pt) => {\n  \n}\n\n// Mollweide (elliptical, Babinet, homolographic) Pseudocylindrical, Equal-area projection\nexport const pjt_Mollweide = (pt) => {\n  const λ = pt[0] * radians;\n  const φ = pt[1] * radians;\n  const sqrt2 = sqrt(2);\n  const θ = asin()\n\n  return [ (2*sqrt2/π) * λ*Math.cos(θ) * degrees,\n           (sqrt2 * Math.sin(θ)) * degrees];\n}\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}