{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Vis","useRef","React","useEffect","useState","mount","_useState","_useState2","Object","slicedToArray","isAnimating","setAnimating","controls","frameId","width","current","clientWidth","height","clientHeight","earthVec","THREE","scene","camera","position","z","light","add","set","loader","geometry","material","map","load","bumpMap","bumpScale","specularMap","specular","earthMesh","rotation","x","cloudsMesh","side","opacity","transparent","depthWrite","moonMesh","starsMesh","renderer","antialias","setClearColor","setSize","renderScene","render","handleResize","aspect","updateProjectionMatrix","animate","y","lookAt","window","requestAnimationFrame","start","stop","cancelAnimationFrame","appendChild","domElement","addEventListener","removeEventListener","removeChild","remove","dispose","react_default","a","createElement","className","style","ref","onClick","App","App_Vis","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAIMA,EAAM,WAAM,IACTC,EAA+BC,IAA/BD,OAAQE,EAAuBD,IAAvBC,UAAWC,EAAYF,IAAZE,SACpBC,EAAQJ,EAAO,MAFLK,EAGoBF,GAAS,GAH7BG,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GAGTI,EAHSH,EAAA,GAGII,EAHJJ,EAAA,GAIVK,EAAWX,EAAO,MA8IxB,OA5IAE,EAAU,WACR,IAEIU,EAFAC,EAAST,EAAMU,QAAQC,YACvBC,EAASZ,EAAMU,QAAQG,aAErBC,EAAW,IAAIC,IAAc,EAAE,EAAE,GAEjCC,EAAY,IAAID,IAChBE,EAAY,IAAIF,IAAwB,GAAIN,EAAMG,EAAQ,IAAK,KACrEK,EAAOC,SAASC,EAAI,EAEpB,IAAMC,EAAY,IAAIL,IAAmB,SACzCC,EAAMK,IAAID,IAEVA,EAAQ,IAAIL,IAAuB,SAAU,KACvCG,SAASI,IAAI,EAAE,EAAE,GACvBN,EAAMK,IAAID,GASV,IAAMG,EAAY,IAAIR,IAChBS,EAAY,IAAIT,IAA2B,GAAI,GAAI,IACnDU,EAAY,IAAIV,IAAwB,CAC1CW,IAAcH,EAAOI,KAAK,sBAC1BC,QAAcL,EAAOI,KAAK,uBAC1BE,UAAc,IACdC,YAAcP,EAAOI,KAAK,uBAC1BI,SAAc,IAAIhB,IAAY,UAE5BiB,EAAY,IAAIjB,IAAWS,EAAUC,GAC3CO,EAAUC,SAASC,GAAK,GACxBlB,EAAMK,IAAIW,GAEV,IAAMG,EAAa,IAAIpB,IACrB,IAAIA,IAAqB,KAAW,GAAI,IACxC,IAAIA,IAAwB,CAC1BW,IAAcH,EAAOI,KAAK,0BAC1BS,KAAcrB,IACdsB,QAAc,GACdC,aAAc,EACdC,YAAc,KAGlBvB,EAAMK,IAAIc,GACVA,EAAWF,SAASC,GAAK,GAEzB,IAAMM,EAAW,IAAIzB,IACnB,IAAIA,IAAqB,IAAK,GAAI,IAClC,IAAIA,IAAwB,CAC1BW,IAAYH,EAAOI,KAAK,qBACxBC,QAAYL,EAAOI,KAAK,uBACxBE,UAAY,OAGhBW,EAAStB,SAASI,IAAI,KAAM,GAAI,GAChCN,EAAMK,IAAImB,GAEV,IAAMC,EAAY,IAAI1B,IACpB,IAAIA,IAAqB,GAAI,GAAI,IACjC,IAAIA,IAAwB,CAC1BW,IAAOH,EAAOI,KAAK,4BACnBS,KAAOrB,OAGXC,EAAMK,IAAIoB,GAEV,IAAMC,EAAY,IAAI3B,IAAoB,CAAE4B,WAAW,IACvDD,EAASE,cAAc,WACvBF,EAASG,QAAQpC,EAAOG,GAExB,IAAMkC,EAAc,WAClBJ,EAASK,OAAO/B,EAAOC,IAGnB+B,EAAe,WACnBvC,EAAST,EAAMU,QAAQC,YACvBC,EAASZ,EAAMU,QAAQG,aACvB6B,EAASG,QAAQpC,EAAOG,GACxBK,EAAOgC,OAASxC,EAAQG,EACxBK,EAAOiC,yBACPJ,KAGIK,EAAU,SAAVA,IAEJnB,EAAUC,SAASmB,GAAM,KACzBjB,EAAWF,SAASmB,GAAK,MACzBZ,EAASP,SAASmB,GAAO,KACzBnC,EAAOC,SAASgB,GAAK,KACrBjB,EAAOC,SAASkC,GAAK,KACrBnC,EAAOC,SAASC,GAAK,KACjBF,EAAOC,SAASC,EAAI,GACtBF,EAAOC,SAASI,IAAI,EAAE,EAAE,GAE1BL,EAAOoC,OAAOvC,GAEdgC,IACAtC,EAAU8C,OAAOC,sBAAsBJ,IAGnCK,EAAQ,WACPhD,IACHA,EAAU+C,sBAAsBJ,KAI9BM,EAAO,WACXC,qBAAqBlD,GACrBA,EAAU,MASZ,OANAR,EAAMU,QAAQiD,YAAYjB,EAASkB,YACnCN,OAAOO,iBAAiB,SAAUb,GAClCQ,IAEAjD,EAASG,QAAU,CAAE8C,QAAOC,QAErB,WACLA,IACAH,OAAOQ,oBAAoB,SAAUd,GACrChD,EAAMU,QAAQqD,YAAYrB,EAASkB,YAEnC5C,EAAMgD,OAAOhC,GACbR,EAASyC,UACTxC,EAASwC,YAEV,IAEHnE,EAAU,WACJO,EACFE,EAASG,QAAQ8C,QAEjBjD,EAASG,QAAQ+C,QAElB,CAACpD,IAEG6D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACdC,MAAO,CAAE7D,MAAO,QAASG,OAAQ,SACjC2D,IAAKvE,EAAOwE,QAAS,kBAAMlE,GAAcD,OAYpCoE,EATH,WACV,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAACM,EAAD,QCnJcC,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCZNC,IAAShC,OAAOmB,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e0f6b7fb.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport * as THREE from 'three';\n\nconst Vis = () => {\n  const {useRef, useEffect, useState} = React;\n  const mount = useRef(null);\n  const [isAnimating, setAnimating] = useState(true);\n  const controls = useRef(null);\n\n  useEffect(() => { // componentDidMount()\n    let width  = mount.current.clientWidth;\n    let height = mount.current.clientHeight;\n    let frameId;\n    const earthVec = new THREE.Vector3(0,0,0);\n\n    const scene     = new THREE.Scene();\n    const camera    = new THREE.PerspectiveCamera(45, width/height, .01, 1000);\n    camera.position.z = 2;\n\n    let   light     = new THREE.AmbientLight(0x888888);\n    scene.add(light);\n\n    light = new THREE.DirectionalLight(0xffffff, .4);\n    light.position.set(5,5,5);\n    scene.add(light);\n    /*\n    light.castShadow = true;\n    light.shadowCameraNear = .01;\n    light.shadowCameraFar  = 15;\n    light.shadowCameraFov  = 45;\n    light.shadowMapWidth  = 1024;\n    light.shadowMapHeight = 1024;\n*/\n    const loader    = new THREE.TextureLoader();\n    const geometry  = new THREE.SphereBufferGeometry(.5, 32, 32);\n    const material  = new THREE.MeshPhongMaterial({\n        map         : loader.load('img/earthmap1k.jpg'),\n        bumpMap     : loader.load('img/earthbump1k.jpg'),\n        bumpScale   : .05,\n        specularMap : loader.load('img/earthspec1k.jpg'),\n        specular    : new THREE.Color('grey')\n      });\n    const earthMesh = new THREE.Mesh(geometry, material);\n    earthMesh.rotation.x += .4;\n    scene.add(earthMesh);\n\n    const cloudsMesh = new THREE.Mesh(\n      new THREE.SphereGeometry(.5 + .008, 32, 32),\n      new THREE.MeshPhongMaterial({\n        map         : loader.load('img/fair_clouds_4k.png'),\n        side        : THREE.DoubleSide,\n        opacity     : .8,\n        transparent : true,\n        depthWrite  : false\n      })\n    );\n    scene.add(cloudsMesh);\n    cloudsMesh.rotation.x += .6;\n\n    const moonMesh = new THREE.Mesh(\n      new THREE.SphereGeometry(.08, 16, 16),\n      new THREE.MeshPhongMaterial({\n        map       : loader.load('img/moonmap1k.jpg'),\n        bumpMap   : loader.load('/img/moonbump1k.jpg'),\n        bumpScale : .01\n      })\n    );\n    moonMesh.position.set(.25, -.2, 2);\n    scene.add(moonMesh);\n    \n    const starsMesh = new THREE.Mesh(\n      new THREE.SphereGeometry(90, 32, 32),\n      new THREE.MeshBasicMaterial({\n        map  : loader.load('img/galaxy_starfield.png'),\n        side : THREE.BackSide\n      })\n    );\n    scene.add(starsMesh);\n\n    const renderer  = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setClearColor('#000000');\n    renderer.setSize(width, height);\n\n    const renderScene = () => {\n      renderer.render(scene, camera);\n    }\n\n    const handleResize = () => {\n      width  = mount.current.clientWidth;\n      height = mount.current.clientHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderScene();\n    }\n\n    const animate = () => {\n//      earthMesh.rotation.x += .002;\n      earthMesh.rotation.y  += .002;\n      cloudsMesh.rotation.y += .0025;\n      moonMesh.rotation.y   += .001;\n      camera.position.x += .001;\n      camera.position.y += .0001;\n      camera.position.z += .001;\n      if (camera.position.z > 5)\n        camera.position.set(0,0,2);\n\n      camera.lookAt(earthVec);\n\n      renderScene();\n      frameId = window.requestAnimationFrame(animate);\n    }\n\n    const start = () => {\n      if (!frameId) {\n        frameId = requestAnimationFrame(animate);\n      }\n    }\n\n    const stop = () => {\n      cancelAnimationFrame(frameId);\n      frameId = null;\n    }\n\n    mount.current.appendChild(renderer.domElement);\n    window.addEventListener('resize', handleResize);\n    start();\n\n    controls.current = { start, stop };\n\n    return () => { // componetWillUnmount()\n      stop();\n      window.removeEventListener('resize', handleResize);\n      mount.current.removeChild(renderer.domElement);\n\n      scene.remove(earthMesh);\n      geometry.dispose();\n      material.dispose();\n    }\n  }, []);  // With the second parameter, the useEffect will run only once.\n\n  useEffect(() => {\n    if (isAnimating) {\n      controls.current.start();\n    } else {\n      controls.current.stop();\n    }\n  }, [isAnimating]);\n\n  return <div className=\"vis\" \n          style={{ width: '800px', height: '800px' }}\n          ref={mount} onClick={() => setAnimating(!isAnimating)} />\n}\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h3>SpacetimeQ WebGL Experiment</h3>\n      <Vis />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}