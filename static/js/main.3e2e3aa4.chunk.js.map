{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MasonryHeader","props","react_default","a","createElement","className","title","sub","MasonryItem","img","cnt","dt","Date","date","bgc","diffDays","concat","getBkColor","Math","ceil","now","getTime","href","content","cts","URLs","root","cont","target","rel","style","backgroundColor","getMonth","getDate","getFullYear","src","images","imgExt","alt","nb","desc","MasonryFooter","url","copyright","mailto","contact","App","lns","id","Items","forEach","item","push","App_MasonryItem","Object","assign","key","App_MasonryHeader","Header","App_MasonryFooter","Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kxGAKMA,EAAgB,SAAAC,GAAK,OACzBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBJ,EAAMK,MACrCJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,sBAAsBJ,EAAMM,OAG1CC,EAAc,SAAAP,GAClB,IACsBQ,EADAC,EAchBC,EAAK,IAAIC,KAAKX,EAAMY,MAEtBC,EAdkB,SAAAC,GACpB,OAAIA,GAAY,GACd,qBAAAC,OAA4B,GAAG,IAAI,GAAGD,GAAU,GAAhD,KACSA,GAAY,IACrB,sBACSA,GAAY,IACrB,sBAEA,oBAMME,CADOC,KAAKC,MAAOP,KAAKQ,MAAQT,EAAGU,WAAlB,QAG3B,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,KAAGkB,MAtBWZ,EAsBST,EAAMsB,QAtBPC,EAAIC,KAAKC,KAAOF,EAAIC,KAAKE,KAASjB,GAsBjBkB,OAAO,SAASC,IAAI,uBACzD3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAayB,MAAO,CAACC,gBAAiBjB,IACnDZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAXV,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAW5CM,EAAGqB,YAAc,IAAMrB,EAAGsB,WACjE/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaM,EAAGuB,gBAEjChC,EAAAC,EAAAC,cAAA,OAAK+B,KA1BO1B,EA0BUR,EAAMsB,QA1BRC,EAAIC,KAAKC,KAAOF,EAAIC,KAAKW,OAAS3B,EAAMe,EAAIC,KAAKY,QA0B/BC,IAAKrC,EAAMqC,QAGrDpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAiBJ,EAAMK,MAClCL,EAAMsC,IAAMrC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcJ,EAAMsC,KAEnDrC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAAuBJ,EAAMuC,UAO9CC,EAAgB,SAAAxC,GAAK,OACzBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,KAAGkB,KAAMrB,EAAMyC,IAAKd,OAAO,SAASC,IAAI,yCAAyC5B,EAAMK,OACtF,IAAML,EAAM0C,UACbzC,EAAAC,EAAAC,cAAA,KAAGkB,KAAMrB,EAAM2C,QAAS,IAAM3C,EAAM4C,YA0B3BC,EArBH,WACV,IAAIC,EAAM,GACNC,EAAG,EAMP,OALAxB,EAAIyB,MAAMC,QAAQ,SAAAC,GAAI,OACpBJ,EAAIK,KAAMlD,EAAAC,EAAAC,cAACiD,EAADC,OAAAC,OAAA,CAAaC,IAAOR,KAAUG,OAKxCjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACqD,EAAkBjC,EAAIkC,QACvBxD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZ0C,IAGL7C,EAAAC,EAAAC,cAACuD,EAAkBnC,EAAIoC,UClETC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3e2e3aa4.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nimport cts from './contents.json';  // list of items\n\nconst MasonryHeader = props =>\n  <div className=\"masonry-header\">{props.title}\n    <span className=\"masonry-header-sub\">{props.sub}</span>\n  </div>;\n\nconst MasonryItem = props => {\n  const getContentURL = cnt => (cts.URLs.root + cts.URLs.cont   + cnt);\n  const getImageURL   = img => (cts.URLs.root + cts.URLs.images + img + cts.URLs.imgExt);\n  const getBkColor    = diffDays => {\n    if (diffDays <= 30) {\n      return `rgba(231, 76, 60, ${.4+.6*(30-diffDays)/30})`\n    } else if (diffDays <= 366/2) {\n      return `rgba(0, 100, 0, .6)`\n    } else if (diffDays <= 366) {\n      return `rgba(0, 0, 100, .6)`\n    } else {\n      return `rgba(0, 0, 0, .6)`\n    }\n  };\n  const mon_name = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const dt = new Date(props.date);\n  const diffDays = Math.ceil(( Date.now() - dt.getTime() ) / (1000 * 60 * 60 * 24));\n  let bgc = getBkColor(diffDays);\n\n  return (\n    <div className=\"masonry-item\">\n      <div className=\"masonry-content\">\n        <div className=\"masonry-img\">\n          <a href={getContentURL(props.content)} target=\"_blank\" rel=\"noopener noreferrer\">\n            <div className=\"date-stamp\" style={{backgroundColor: bgc}}>\n              <div className=\"date-mon-dd\">{mon_name[dt.getMonth()] + '.' + dt.getDate()}</div>\n              <div className=\"date-year\">{dt.getFullYear()}</div>\n            </div>\n            <img src={getImageURL(props.content)} alt={props.alt} />\n          </a>\n        </div>\n        <div className=\"masonry-text\">\n          <h3 className=\"masonry-title\">{props.title}\n            {props.nb && <span className=\"masonry-nb\">{props.nb}</span>}\n          </h3>\n          <p className=\"masonry-description\">{props.desc}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst MasonryFooter = props =>\n  <div className=\"masonry-footer\">\n    <p>\n      <a href={props.url} target=\"_blank\" rel=\"external noopener noreferrer nofollow\">{props.title}</a>\n      {\" \" + props.copyright}\n      <a href={props.mailto}>{\" \" + props.contact}</a>\n    </p>\n  </div>;\n\n// ES2018 property spread notation {...props}\nconst App = () => {\n  let lns = [];\n  let id=0;\n  cts.Items.forEach(item =>\n    lns.push( <MasonryItem key = {id++} {...item} /> )\n  );\n  //console.log(id, \"items\");\n\n  return (\n    <div className=\"App\">\n      <MasonryHeader {...cts.Header} />\n      <div className=\"masonry-wrapper\">\n        <div className=\"masonry\">\n          {lns}\n        </div>\n      </div>\n      <MasonryFooter {...cts.Footer} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}